#!/usr/bin/env ruby

require 'cloudsaw'
require 'uri'
require 'celluloid'
require 'fileutils'

require "optparse"
opts = ARGV.getopts("v", "verbose", "debug")

unless ARGV.count == 2
  $stderr.puts """
    Usage: s3-sync s3://bucket/some/path/ local/dir/
  """
  exit 2
end

VERBOSE = opts["v"] || opts["verbose"]
DEBUG = opts["debug"]

def parse_s3_uri(uri)
  u = URI.parse uri
  u.scheme == "s3" or raise "Not an s3 URI"
  [ u.host, u.path[1..-1] ]
end

@@lock = Mutex.new
def puts(s)
  @@lock.synchronize do
    $stdout.sync = true
    $stdout.puts s
  end
end

class S3ToFileSync
  attr_reader :object, :file

  def initialize(object, file)
    @object = object
    @file = file
  end

  def s3_head
    @s3_head ||= object.head
  end

  def s3_size
    s3_head.content_length
  end

  def s3_mtime
    s3_head.last_modified
  end

  def sync
    if synced?
      puts "Already synced #{object} to #{file} size=#{s3_size.inspect} mtime=#{s3_mtime.inspect}" if DEBUG
      return
    end

    puts "sync #{object} to #{file} size=#{s3_size.inspect} mtime=#{s3_mtime.inspect}" if VERBOSE

    tmp_file = file+".synctmp"
    puts "open > #{tmp_file}" if DEBUG
    File.open(tmp_file, 'wb') do |io|
      object.read do |chunk|
        io.write(chunk)
      end
    end
    puts "write to #{tmp_file} completed" if DEBUG

    File.utime s3_mtime, s3_mtime, tmp_file
    puts "utime to #{tmp_file} completed" if DEBUG
    File.rename tmp_file, file
    puts "rename #{tmp_file} => #{file} completed" if DEBUG
  end

  def synced?
    begin
      stat = File.stat file
      stat.file? and stat.size == s3_size and stat.mtime == s3_mtime
    rescue Errno::ENOENT
      false
    end
  end
end

s3_dir, local_dir = ARGV
bucket_name, prefix = parse_s3_uri s3_dir

s3_client = CloudSaw.create_s3_client
bucket = s3_client.buckets[bucket_name]

futures = {}
bucket.objects.with_prefix(prefix).each do |object|
  key = object.key
  local_key = key.sub prefix, local_dir

  f = Celluloid::Future.new do
    FileUtils.mkdir_p File.dirname local_key
    S3ToFileSync.new(object, local_key).sync
  end

  futures[key] = f
end

errors = 0
futures.each do |key, future|
  begin
    future.value
  rescue Exception => e
    $stderr.puts "Error syncing #{key}: #{e}"
    errors = errors + 1
  end
end

exit 1 if errors > 0
exit 0
