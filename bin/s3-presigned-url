#!/usr/bin/env ruby

require 'cloudsaw'

require 'optparse'

options = {}

# options[:signature_version] = :v4
options[:expires] = Time.now + 3600

opts_parser = OptionParser.new do |opts|
  opts.banner = <<EOF

Usage: s3-presigned-url [OPTIONS] S3URL [S3URL ...]
Usage: s3-presigned-url [OPTIONS] BUCKET KEY [KEY ...]

Generates presigned URLs for accessing objects in S3.  The objects are either
specified either in URL form (s3://bucket/key), or with the bucket and key as
separate arguments.  The URLs are emitted to standard output, one per line, in
the same order as the input arguments.

EOF

  opts.on("--expires", "-e", :REQUIRED, "Specify the expiry time of the URLs") do |v|
    if v.match /^\d+$/
      if v.to_i < 1E9
        options[:expires] = Time.now + v.to_i
      else
        options[:expires] = Time.at v.to_i
      end
    else
      require 'time'
      options[:expires] = Time.parse v
    end
  end

  opts.on("--insecure", "-k", :NONE, "Generates insecure (http, not https) URLs") { options[:insecure] = true }
  opts.on("--path-style", "-p", :NONE, "Generates path-style (not vhost-style) URLs") { options[:path_style] = true }

  opts.separator <<EOF

Expiry times may be specified as an epoch time in seconds; time from now, in
seconds; or as some date/time string.

The default style of generated URLs is secure, vhost-style.

Examples:

  s3-presigned-url --expires 1200 my-assets-bucket images/banner.jpg images/footer.jpg

  s3-presigned-url s3://my-assets-bucket/images/banner.jpg

EOF
end

opts_parser.parse!
# $stderr.puts opts_parser.help

@s3_client = CloudSaw.create_s3_client

def get_temporary_keys_from_environment
  # So many different env keys in use :-(
  [
    ENV["AWS_ACCESS_KEY_ID"],
    ENV["AWS_SECRET_ACCESS_KEY"],
    ENV["AWS_SESSION_TOKEN"],
  ]
end

def get_temporary_keys_via_sts
  sts = AWS::STS.new

  policy = AWS::STS::Policy.new
  policy.allow(:actions => ["s3:GetObject"], :resources => "arn:aws:s3:::#{bucket_name}/#{object_name}")
  duration = options[:expires] - Time.now
  session = sts.new_federated_session("TemporaryUser", :policy => policy, :duration => duration.to_i)

  access_key_id=session.credentials[:access_key_id]
  secret_access_key = session.credentials[:secret_access_key]
  security_token = session.credentials[:session_token]
end

# https://forums.aws.amazon.com/thread.jspa?threadID=102292
# I wonder if the Ruby SDK url_for works at all?
def do_bucket_key(bucket_name, object_name, options)
  access_key_id, secret_access_key, security_token = if ENV.has_key? "AWS_SESSION_TOKEN"
                                                       get_temporary_keys_from_environment
                                                     else
                                                       get_temporary_keys_via_sts
                                                     end

  expiration = options[:expires].to_i

  string_to_sign = "GET\n\n\n#{expiration}\nx-amz-security-token:#{security_token}\n/#{bucket_name}/#{object_name}"

  signature = CGI.escape(
                Base64.encode64(
                  OpenSSL::HMAC.digest(
                    OpenSSL::Digest.new('sha1'),
                    secret_access_key,
                    string_to_sign,
                  )
                ).gsub("\n","")
              )

  object_url = if options[:path_style]
                 "https://s3.amazonaws.com/#{bucket_name}/#{object_name}"
               elsif options[:insecure]
                 "http://#{bucket_name}.s3.amazonaws.com/#{object_name}"
               else
                 "https://#{bucket_name}.s3.amazonaws.com/#{object_name}"
               end

  url = object_url + "?AWSAccessKeyId=#{access_key_id}&Expires=#{expiration}&Signature=#{signature}&x-amz-security-token=#{CGI.escape(security_token)}"

  puts url
end

exit if ARGV.empty?

if ARGV.first.start_with? "s3://"
  require 'uri'
  ARGV.each do |arg|
    uri = URI.parse arg
    do_bucket_key uri.host, uri.path.gsub(/^\//, ""), options
  end
else
  bucket_name = ARGV.shift

  ARGV.each do |object_name|
    do_bucket_key bucket_name, object_name, options
  end
end

