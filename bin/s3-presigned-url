#!/usr/bin/env ruby

require 'cloudsaw'

require 'optparse'

methods = []
options = {}

# options[:signature_version] = :v4
options[:expires] = Time.now + 3600
options[:secure] = true

opts_parser = OptionParser.new do |opts|
  opts.on("--read", "--get", :NONE) do
    methods << :get
  end
  opts.on("--write", "--put", :NONE) do
    $stderr.puts "Warning: Currently the only supported operation is GET"
    methods << :put
  end
  opts.on("--head", :NONE) do
    $stderr.puts "Warning: Currently the only supported operation is GET"
    methods << :head
  end
  opts.on("--delete", :NONE) do
    $stderr.puts "Warning: Currently the only supported operation is GET"
    methods << :delete
  end

  opts.on("--expires", :REQUIRED) do |v|
    if v.match /^\d+$/
      if v.to_i < 1E9
        options[:expires] = Time.now + v.to_i
      else
        options[:expires] = Time.at v.to_i
      end
    else
      require 'time'
      options[:expires] = Time.parse v
    end
  end

  opts.on("--secure", :NONE)   { options[:secure] = true }
  opts.on("--insecure", :NONE) { options[:secure] = false }

  # :content_type put
  # :content_md5 put
  # :endpoint
  # :port
  # :force_path_style

  # :response_content_type
  opts.on("--response-content-type", "-t", :REQUIRED) do |v|
    # FIXME ignored by do_manual_signing
    options[:response_content_type] = v
  end

  # :response_content_language
  # :response_expires
  # :response_cache_control
  # :response_content_disposition
  # :acl
  # :response_content_encoding
  # :signature_version
end

opts_parser.parse!
# $stderr.puts opts_parser.help

# FIXME ignored by do_manual_signing
methods << :get if methods.empty?
methods = methods.sort.uniq

@s3_client = CloudSaw.create_s3_client

# https://forums.aws.amazon.com/thread.jspa?threadID=102292
# I wonder if the Ruby SDK url_for works at all?
def do_manual_signing(bucket_name, object_name, options)
  sts = AWS::STS.new

  policy = AWS::STS::Policy.new
  policy.allow(:actions => ["s3:GetObject"], :resources => "arn:aws:s3:::#{bucket_name}/#{object_name}")
  duration = options[:expires] - Time.now
  session = sts.new_federated_session("TemporaryUser", :policy => policy, :duration => duration.to_i)

  access_key_id=session.credentials[:access_key_id]
  secret_access_key = session.credentials[:secret_access_key]
  security_token = session.credentials[:session_token]
  expiration = options[:expires].to_i

  string_to_sign = "GET\n\n\n#{expiration}\nx-amz-security-token:#{security_token}\n/#{bucket_name}/#{object_name}"

  signature = CGI.escape(
              Base64.encode64(
                OpenSSL::HMAC.digest(
                  OpenSSL::Digest.new('sha1'),
                    secret_access_key, string_to_sign)).gsub("\n",""))

  scheme = if options[:secure] == false
             "http"
           else
             "https"
           end

  url =  "https://s3.amazonaws.com/#{bucket_name}/#{object_name}?AWSAccessKeyId=#{access_key_id}&Expires=#{expiration}&Signature=#{signature}&x-amz-security-token=#{CGI.escape(security_token)}"
  url =  "#{scheme}://#{bucket_name}.s3.amazonaws.com/#{object_name}?AWSAccessKeyId=#{access_key_id}&Expires=#{expiration}&Signature=#{signature}&x-amz-security-token=#{CGI.escape(security_token)}"
  puts url
end

def do_bucket_key(bucket_name, object_name, options)
  return do_manual_signing bucket_name, object_name, options
  bucket = @s3_client.buckets[bucket_name]
  object = bucket.objects[object_name]
  url = object.url_for(methods, options)
  puts url
end

exit if ARGV.empty?

if ARGV.first.start_with? "s3://"
  require 'uri'
  ARGV.each do |arg|
    uri = URI.parse arg
    do_bucket_key uri.host, uri.path.gsub(/^\//, ""), options
  end
else
  bucket_name = ARGV.shift

  ARGV.each do |object_name|
    do_bucket_key bucket_name, object_name, options
  end
end

