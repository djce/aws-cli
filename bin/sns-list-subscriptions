#!/usr/bin/env ruby

require 'cloudsaw'
require 'optparse'

def endpoint_name(n)
  # Strip off arn, provider, service, region, account.
  n.sub /^arn:aws:[^:]*:[^:]*:[^:]*:/, ""
end

names = false
fields = [0,1,2]
opts_parser = OptionParser.new do |opts|
  opts.banner = "Usage: sns-list-subscriptions [OPTIONS] [FILTER ...]"
  opts.separator ""
  opts.on("-t", "--topic", "Only show the topic") { fields = [0] }
  opts.on("-e", "--endpoint", "Only show the endpoint") { fields = [2] }
  opts.on("-n", "--name", "Show names, not arns") { names = true }
  opts.separator <<EOF

FILTER is a regular expression.  If at least one FILTER is given, then results
will be discarded unless the topic arn and/or endpoint match at least one of
the patterns.  (Note that it's always the arn that's tested, even if the
--name option is used).

Examples:

  # List all subscriptions
  sns-list-subscriptions

  # Only show subscriptions where the topic or endpoint include "Foo" or "Bar"
  sns-list-subscriptions Foo Bar

  # Show topic names sending to FooQueue
  sns-list-subscriptions -t -n FooQueue

  # Show queue names subscribing to FooTopic
  sns-list-subscriptions -e -n FooTopic

EOF
end

opts_parser.parse!

sns_client = CloudSaw.create_sns_client

sns_client.subscriptions.each do |s|
  t = s.topic.arn
  e = s.endpoint

  next if !ARGV.empty? and !ARGV.any? { |prefix| t.match(prefix) or e.match(prefix) }

  f = [
    (names ? s.topic.name : s.topic.arn),
    s.protocol.to_s,
    (names ? endpoint_name(s.endpoint) : s.endpoint),
  ]

  f = fields.map {|i| f[i]}
  puts f.join "\t"
end
